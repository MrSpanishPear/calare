#!/usr/bin/python3
import sys
import os
import time
from datetime import datetime
import pytz
from ics import Calendar, Event
from dateutil.rrule import rrule, WEEKLY
from constants import WEEKDAYS, CLASS_DAYS, MIDSEM_WEEK_NUMBER, NUM_WEEKS, TUT_LENGTH_HOURS, LAB_LENGTH_HOURS, START_DATES


def utc_to_local(utc_dt):
    '''
        Should convert UTC to local time, and handle daylight savings
        https://stackoverflow.com/a/48602841
    '''
    local_tz = pytz.timezone('Australia/Sydney')
    local_dt = local_tz.localize(utc_dt, is_dst=None)
    return local_dt.astimezone(pytz.utc)


def create_cal_event(event_name, event_start, event_end):
    '''
        Create's an event
        @param event_name:str - Name of the event
        @param event_start:str - Time of the event start, "yyyy-mm-dd HH:MM:SS"
        @param event_end:str - Time of event end
    '''
    e = Event()
    e.name = event_name
    e.begin = event_start
    e.end = event_end
    return e


def add_class_event(cal, start_time, end_time, dt, event_name):

    start_dt = utc_to_local(
        datetime(dt.year, dt.month, dt.day, start_time, 0, 0))
    start = start_dt.strftime("%Y-%m-%d %H:%M:%S")
    end_dt = utc_to_local(
        datetime(dt.year, dt.month, dt.day, end_time, 0, 0))
    end = end_dt.strftime("%Y-%m-%d %H:%M:%S")

    cal.events.add(create_cal_event(event_name, start, end))


def add_classes(cal, offering_code):
    '''
        Continuously adds classes to the ICS.
        Uses user input of ClassCode and other settings
    '''
    addclass = input("Add a class? [y/n]: ")
    while addclass.startswith('y'):
        print("---- Adding Class ----")
        print("If you enter some wrong information, answer q to restart that question\n")

        course = input("Enter Course Code: ")

        while (class_code := input("Class code? Ie H13A: ")).lower().startswith("q"):
            continue

        while (tutor_input := input("T or AT? : ").lower()).startswith("q"):
            continue

        tutor_bool = tutor_input.startswith('t')
        show_tut = True

        if not tutor_bool:

            while (show_tut_input := input(
                    "Add Tutorial and lab(y)? Or just Lab(n)? [y/n/q]: ").lower()).startswith("q"):
                continue

            show_tut = show_tut_input.startswith('y')

        # ie 20T3 splits to 20 and T3
        year = offering_code[:2]
        term = offering_code[2:]
        start_date = START_DATES.get(year).get(term)

        tut_start = int(class_code[1:3])
        lab_start = int(tut_start) + TUT_LENGTH_HOURS
        lab_end = int(lab_start) + LAB_LENGTH_HOURS

        # generate the weeks
        weekday = CLASS_DAYS[class_code[0]]
        date_rule = rrule(WEEKLY, dtstart=start_date,
                          count=NUM_WEEKS, byweekday=(weekday))

        for i, dt in enumerate(date_rule):
            # midsem break - no classes
            if i == MIDSEM_WEEK_NUMBER - 1:
                continue

            # add tutorial
            if show_tut:
                event_name = " ".join([course.upper(), class_code, "TUT"])
                add_class_event(cal, tut_start, lab_start, dt, event_name)

            # add lab
            event_name = " ".join([course.upper(), class_code, "LAB"])
            add_class_event(cal, lab_start, lab_end, dt, event_name)
        addclass = input("Add a class? [y/n]: ")
        if not addclass.startswith('y'): return


def add_help_session(cal, offering_code):
    while input("Add a help-session? [y/n]: ").lower().startswith('y'):
        print("\n---- Adding Session ----")
        print("If you enter some wrong information, answer q to restart thtat question\n")

        course = input("Enter Course Code: ")

        while (day := input("Day of week? (eg THU): ")).lower().startswith("q"):
            continue

        while (start_time := input("Start time (eg 1700): ")).lower().startswith("q"):
            continue

        while (end_time := input("End time (eg 1900): ")).lower().startswith("q"):
            continue

        # TODO -- Error Handling of invalid input
        while (weeks := input("Weeks? (eg 3,4,5,7,8,9,10): ")).lower().startswith("q"):
            continue

        weeks = list(map(int, weeks.split(",")))

        year = offering_code[:2]
        term = offering_code[2:]
        start_date = START_DATES.get(year).get(term)

        # generate the weeks
        weekday = WEEKDAYS[day]
        date_rule = rrule(WEEKLY, dtstart=start_date,
                          count=NUM_WEEKS, byweekday=(weekday))

        for i, dt in enumerate(date_rule):
            # only add weeks requestd lol
            if i not in weeks:
                continue

            # add session
            event_name = " ".join([course.upper(), "Help Session"])
            add_class_event(cal, int(start_time[:2]),
                            int(end_time[:2]), dt, event_name)


def get_offering():
    ''''
        Gets the offering from the user, and validate
    '''
    offering_v = input("Enter Offering,  ie 20T3: ")

    # BASIC parsing because ceebs
    while START_DATES.get(offering_v[:2]).get(offering_v[2:]) is None:
        offering_v = input("Invalid Offering (not a 20/21 term) - try again: ")

    return offering_v


def print_intro():
    '''
        Prints the intro to the program
    '''
    print("Welcome to Calare\n")
    print("This is a tool that will generate an ICS cal for your classes given classcodes and other info")
    print("This tool is designed for Tutors doing 9 x  1 hour tutorials followed by 2 hour labs")
    print("OR Assistant Tutors doing 2 hour Labs")
    print("If you have other needs, this will be open source if you'd like : ^)\n\n")


if __name__ == "__main__":
    c = Calendar()
    print_intro()

    name = input("Enter Name: ")
    offering = get_offering()

    class_or_help_session = int(
        input("Add Class (1), Help Session(2) or finish(3): ").lower())

    while (class_or_help_session):
        if class_or_help_session == 1:
            add_classes(c, offering)

        elif class_or_help_session == 2:
            add_help_session(c, offering)
        
        elif class_or_help_session == 3:
            break

        class_or_help_session =  int(input("Add Class (1), Help Session(2) or finish(3): ").lower())


    filename = '-'.join([name, offering, str(int(time.time())),
                         '-calare-tutor-timetable.ics'])
                         
    if os.path.isfile('./' + filename):
        print("Looks like the file", filename,
              "already exists :(\nPlease delete/rename it")
        sys.exit(1)

    with open(filename, 'w') as output_file:
        print(f"Outputting to {filename}...")
        output_file.writelines(c)

    print("\nDone! Enjoy and please star this project on Github if it's been helpful!")
